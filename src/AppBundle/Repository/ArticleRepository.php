<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     * @return array
     */
    public function findLastFive()
    {
        return $this->createQueryBuilder('article')
            ->leftJoin('article.author', 'author')
            ->addSelect('author')
            ->setMaxResults(5)
            ->orderBy('article.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findTopFive()
    {
        return $this->createQueryBuilder('article')
            ->leftJoin('article.author', 'author')
            ->addSelect('author')
            ->setMaxResults(5)
            ->orderBy('article.voices', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findByIdWithJoins($id)
    {
        return $this->createQueryBuilder('article')
            ->andWhere('article.id = :id')
            ->setParameter(':id', $id)
            ->leftJoin('article.comments', 'comments')
            ->addSelect('comments')
            ->leftJoin('comments.author', 'author')
            ->addSelect('author')
            ->leftJoin('article.tags', 'tags')
            ->addSelect('tags')
            ->addOrderBy('comments.createdAt', 'DESC')
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param $param
     *
     * @return mixed
     */
    public function search($param)
    {
        return $this->createQueryBuilder('article')
            ->andWhere('article.title LIKE :param')
            ->orWhere('article.content LIKE :param')
            ->leftJoin('article.author', 'author')
            ->addSelect('author')
            ->setParameter(':param', '%'.$param.'%')
            ->getQuery()
            ->getResult();
    }

    public function findAllOrdered()
    {
        return $this->createQueryBuilder('article')
            ->leftJoin('article.author', 'author')
            ->addSelect('author')
            ->addOrderBy('article.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findAllPublished()
    {
        return $this->createQueryBuilder('article')
            ->andWhere('article.isPublished = true')
            ->leftJoin('article.author', 'author')
            ->addSelect('author')
            ->addOrderBy('article.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findAllUnpublished()
    {
        return $this->createQueryBuilder('article')
            ->andWhere('article.isPublished = false')
            ->leftJoin('article.author', 'author')
            ->addSelect('author')
            ->addOrderBy('article.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function countUnpublished()
    {
        return $this->createQueryBuilder('article')
            ->andWhere('article.isPublished = false')
            ->select('COUNT(article)')
            ->getQuery()
            ->getOneOrNullResult();
    }
}
